[["index.html", "GDSCN: Intro R with swirl About this Course Skills Level Learning Objectives", " GDSCN: Intro R with swirl December 12, 2022 About this Course This book is part of a series of books for the The Genomic Data Science Community Network (GDSCN). GDSCN is a group of educators gathered with the aim to bring genomic data science education to students at diverse institutions. Skills Level Genetics Novice: no genetics knowledge needed Programming skills Novice: no programming experience needed Learning Objectives "],["setup-on-anvil.html", "Chapter 1 Setup on AnVIL 1.1 AnVIL Instructor guide 1.2 Suggested Timeline 1.3 About AnVIL 1.4 Class Setup 1.5 Workspace", " Chapter 1 Setup on AnVIL 1.1 AnVIL Instructor guide If this is your first time using AnVIL (or first time using it for a course), we recommend checking out the AnVIL Instructor Guide. Several of the instructions below link out to the Instructor Guide for details. 1.2 Suggested Timeline 2+ weeks before Set up billing Request Quota Increase so that you have permission to create enough Workspaces for your whole class Notify Terra of the date(s) of your class, so they can ensure AnVIL is not down for maintenance. Add TAs and coinstructors Run through material - make sure you’re able to Clone the Workspace Start up RStudio, load swirl, and start the first lesson Load the dataset for the project Use dplyr commands, such as dplyr::filter() 2+ weeks before Set up billing Request Quota Increase so that you have permission to create enough Workspaces for your whole class Notify Terra of the date(s) of your class, so they can ensure AnVIL is not down for maintenance. Add TAs and coinstructors Run through material - make sure you’re able to Clone the Workspace Start up RStudio, load swirl, and start the first lesson Load the dataset for the project Use dplyr commands, such as dplyr::filter() 1.3 About AnVIL The AnVIL (Analysis Visualization and Informatics Lab-space) platform is a cloud computing platform specially designed for analyzing biological data, and is used by scientists doing all sorts of biological research. Behind the scenes, AnVIL relies on Google Cloud Platform to provide computing infrastructure. Basically, AnVIL lets you “rent” computers from Google (remotely). Whenever you run an analyses on AnVIL, it actually runs on one of Google’s computers, and AnVIL lets you see the results in your browser. AnVIL uses Terra to provide many computational tools useful for biological data analysis, such as RStudio, Galaxy, and Jupyter Notebooks. Terra takes care of installing these tools on Google’s computers, so that you can just start using them. AnVIL and Terra provide their services for free (managing software, data, and users). You just need to pay Google for the computational resources that you use. 1.3.1 Why use AnVIL in your classroom? 1.4 Class Setup Tip: It’s helpful to have your students sign into AnVIL and provide you with their username ahead of time, so that you can grant permissions to them before the class begins. In order for your students to be able to compute on AnVIL, you must first: Set up Billing to fund your students’ activities. Set up a Google Account - You need a Google account to access AnVIL (Some users) Set up Google Billing Account - This is how Google charges you for your students’ activities. Depending on how you are being funded, this may be taken care of for you. If your funding is being managed by a third party (e.g. through a funding mechanism such as STRIDES, or through your institution), contact them to determine whether you need to do any billing administration through Google. Create Terra Billing Project(s) - This is how you manage students and give them permission to compute on AnVIL. Collect usernames: You will need to know the usernames that your students will be using to access AnVIL. Set up Groups: Creating Terra “Groups” makes it much easier manage your students and TAs/co-instructors on AnVIL. 1.5 Workspace On AnVIL, all computing is done within “Workspaces”. To make things easy for you and your students, we have created an AnVIL Workspace that contains all the files necessary for this exercise, which can be accessed at the following link: This is a public AnVIL Workspace, which is similar to “view only” mode for a document - you and your students can view it freely, but you will need to “clone” your own copy of it in order to do your own work (i.e. start up RStudio, Galaxy, or Jupyter Notebooks, or run a Workflow). There are two ways you can organize your class and give students access to the material: 1.5.1 Option 1: Instructor clones Instructor creates a single clone of the Workspace, and shares it with the whole class. This is simpler, particularly if you are new to AnVIL, but has some disadvantages: - With this setup, it is impossible to tell which students are running up compute costs - expenses are only reported for the class as a whole. - Students will each get their own cloud environment (i.e. their own RStudio session), and some temporary storage space to go with it. But they will all share the same permanent storage, so if they need to save files, they may end up overwriting each others&#39; files. 1.5.2 Option 2: Students clone Each student creates their own copy of the Workspace This is a bit more work up to set up, but is generally preferable for longer-term (i.e. multi-session) courses, especially if your students will need to save or share files. - Costs will be reported per student (i.e. per Workspace) - Students will have their own permanent storage, and can&#39;t overwrite each other&#39;s files. - This is essential for any activities in which they need to save and share a file, either to collaborate with peers or to submit for a grade. - This is also necessary if they will be passing files between different cloud environments (e.g. creating a file in Galaxy, then analyzing it in RStudio). - This setup gives students more power (they are able to create additional Workspaces and invite others to use them, charging to your Billing Account). But it provides transparency about *who* is carrying out activities, enabling you to address any problems with individual students. If you are new to AnVIL, you will need to request a “Project Quota Increase”. In order to prevent abuse, Google has limits that restrict the number of Workspaces that can be created by new accounts (as of Dec 2022, new users are limited to 5 Workspaces). "],["r-programming-with-swirl.html", "Chapter 2 R Programming with swirl 2.1 Complete your first swirl lesson 2.2 Complete additional swirl lessons", " Chapter 2 R Programming with swirl This exercise will have you utilize an R tutorial package called swirl, which will allow you to learn R from within R. Using swirl, you will complete a series of lessons that will teach you the fundamentals of R programming. 2.1 Complete your first swirl lesson Estimated time: 20 min Open RStudio. In the R console window, type the following commands to load the swirl package: library(swirl) swirl() Install the course “R Programming: The basics of programming in R”, by following the instructions provided by swirl. Enter your name. Press ENTER. Enter 1, 2, or 3. Install the course “R Programming: The basics of programming in R”. Complete your first lesson. Select “R Programming”. Select “Basic Building Blocks”, by entering 1 ( i.e. the corresponding lesson number ). Follow the instructions provided by swirl to complete your first lesson. At the end, when swirl asks if you would like to receive Coursera credit, select “No”. 2.2 Complete additional swirl lessons Estimated time: 80 min Complete additional swirl lessons. Select “R Programming” Compete each of the following lessons: 4: Vectors 5: Missing_Values 6: Subsetting_Vectors 12: Looking_at_Data Once you have completed all the lessons listed above, exit swirl. To exit swirl, type bye() in the R console, press ESC on your keyboard, or enter 0 in response to the swirl course menu prompt. "],["explore-us_contagious_diseases-dataframe.html", "Chapter 3 Explore us_contagious_diseases dataframe 3.1 R tips 3.2 Explore dataframe", " Chapter 3 Explore us_contagious_diseases dataframe Now we will use your R skills to explore the US Contagious Diseases dataset. This dataset is part of dslabs, a collection of datasets for practicing data analysis assembled by Rafael Irizarry and Amy Gill. You can use the help function (?us_contagious_diseases) in RStudio to find out more about this dataset. 3.1 R tips Don’t worry if you can’t remember everything - data scientists and computer programmers don’t memorize everything either. That’s why there’s a help function built in to R! As a reminder, here are a few useful commands for exploring dataframes: dim() head() tail() summary() str() If you need help remembering how to use a command, use ? ?dim If you start using R frequently, you’ll naturally start to remember some of the common commands. But don’t hesitate to look things up, or ask if you get stuck! 3.2 Explore dataframe Estimated time: 20 min To start, you will need to load the dslabs package, which contains the dataset. Type the following commands to load the package and confirm that you can view the dataset. You should see a printout of the first few rows of data, as shown below. library(dslabs) head(us_contagious_diseases) ## disease state year weeks_reporting count population ## 1 Hepatitis A Alabama 1966 50 321 3345787 ## 2 Hepatitis A Alabama 1967 49 291 3364130 ## 3 Hepatitis A Alabama 1968 52 314 3386068 ## 4 Hepatitis A Alabama 1969 49 380 3412450 ## 5 Hepatitis A Alabama 1970 51 413 3444165 ## 6 Hepatitis A Alabama 1971 51 378 3481798 It can be a bit annoying to have to type out the whole dataset name, and it’s easy to make errors. Remember that you can use “tab completion” to make the computer do the work for you! Start typing the first few letters (i.e. us), then hit the TAB key on your keyboard and you should see a list of autocomplete possibilities. Use your mouse or the arrow keys to select the one you want, or just keep typing until it’s the only one left, then hit ENTER and it will autocomplete for you. Take a minute to look at the first few rows of this dataset. Q1. How many columns are there? Q2. What’s in each column? Now use some R commands to dig a little deeper into the data. Q3. What diseases are reported in this dataset? (Hint: there are 7) Q4. What time period does this dataset cover? What’s the earliest year reported? What’s the latest year reported? Now let’s investigate something more specific: what’s the average case count for a particular disease in a particular state? The following command will extract all the rows where the disease column is equal to “Hepatitis A” and the state column is equal to “Maryland”. It stores that (much smaller) dataset in a dataframe named hepatitis_md. hepatitis_md &lt;- dplyr::filter(us_contagious_diseases, disease==&quot;Hepatitis A&quot;, state==&quot;Maryland&quot;) head(hepatitis_md) ## disease state year weeks_reporting count population ## 1 Hepatitis A Maryland 1966 52 812 3635161 ## 2 Hepatitis A Maryland 1967 52 854 3717154 ## 3 Hepatitis A Maryland 1968 52 741 3793418 ## 4 Hepatitis A Maryland 1969 49 704 3862374 ## 5 Hepatitis A Maryland 1970 51 907 3922399 ## 6 Hepatitis A Maryland 1971 51 1082 3972358 Using this new, filtered dataframe, find the average case count: Q5. What is the median case count for Hepatitis A in Maryland? Copy the above command, and run it in RStudio. Then use an R command to find the median of the count column in the hepatitis_md dataframe. Q6. Modify the above command to select for Polio cases in Vermont, and find the median case count. Remember that you can use the up arrow to cycle through previous commands. Tap the up arrow until you get back to the command that extracted the data for Hepatitis A in Maryland. Modify the command to select for Polio in Vermont. Don’t forget to store this data using a different name! It would be confusing to have the Vermont Polio data stored in an object named hepatitis_md. Challenge: Estimated time: 20 min It’s difficult to make comparisons across states with this data as is. A case count of, say, 500 is much more concerning if it happens in a state with a small population, because it means a greater percentage of the people are getting sick. For example, the median case count for Polio in New York is 685. That’s much higher than Vermont! But let’s use the data to see whether the case counts are comparable when we adjust for the number of people in each state. This will take a few steps, and you’ll need to use multiple R commands to transform the data and extract the information you want. First, extract the New York Polio data, just like you did for the Vermont data, and store it in a new dataframe. Then, for each of these dataframes calculate the case count per 100,000 people (this is a common way to report disease frequencies) Then find the median for each state. Some tips and reminders: You can get individual columns from a dataframe using $. For example, us_contagious_diseases$count will give you a vector containing the whole counts column. If you have multiple vectors, you can do mathematical operations with them. You don’t have to do everything in one command (although you can!). You can store any intermediate results using &lt;-. Just make sure to use a name that helps you remember what you stored. So, to get the disease frequencies: Extract the count and population columns from the Vermont Polio data. Divide count by population. Multiply the result by 100000 (don’t use commas, R will be confused if you try to use 100,000). Find the median of this new vector. Repeat these steps for the New York Polio data. Finally, answer the question: C1. Is the median case count per 100000 people higher in New York or Vermont? "],["wrap-up-on-anvil.html", "Chapter 4 Wrap-up on AnVIL 4.1 Pause RStudio environment 4.2 Delete RStudio environment", " Chapter 4 Wrap-up on AnVIL Cloud computing costs are based on the amount of time you use the computing resources, so it’s important to clean up after yourself when you’re done, and not just leave the computers running. There are two ways to “shut down” RStudio on AnVIL: Pause the environment: This will save a copy of your work, and then release the computers for other people to use them. Do this if you plan to continue working in RStudio. It’s similar to turning off your computer or phone - when you start it back up, everything will be where you left it. This still costs a small amount of money, but much less than leaving the computer running. Delete the environment: This will delete everything and then release the computers for other people to use them. Do this if you are completely finished working in RStudio, or if your future work will be in a new environment. It’s similar to throwing your computer or phone in the trash! You will not be able to recover your work. Make sure you have saved anything you need before you delete your environment. 4.1 Pause RStudio environment The upper right corner reminds you that you are accruing cloud computing costs. You should minimize charges when you are not performing an analysis. You can do this by clicking on “Stop cloud environment”. This will release the CPU and memory resources for other people to use. Note that your work will be saved in the environment and continue to accrue a very small cost. This work will be lost if the cloud environment gets deleted. If there is anything you would like to save permanently, it’s a good idea to copy it from your compute environment to another location, such as the Workspace bucket, GitHub, or your local machine, depending on your needs. 4.2 Delete RStudio environment Stopping your cloud environment only pauses your work. When you are ready to delete the cloud environment, click on the gear icon in the upper right corner to “Update cloud environment”. Click on “Delete Environment Options”. If you are certain that you do not need the data and configuration on your disk, you should select “Delete everything, including persistent disk”. If there is anything you would like to save, open the compute environment and copy the file(s) from your compute environment to another location, such as the Workspace bucket, GitHub, or your local machine, depending on your needs. Select “DELETE”. "],["about-the-authors.html", "About the Authors", " About the Authors These credits are based on our course contributors table guidelines.     Credits Names Pedagogy Lead Content Instructor(s) FirstName LastName Lecturer(s) (include chapter name/link in parentheses if only for specific chapters) - make new line if more than one chapter involved Delivered the course in some way - video or audio Content Author(s) (include chapter name/link in parentheses if only for specific chapters) - make new line if more than one chapter involved If any other authors besides lead instructor Content Contributor(s) (include section name/link in parentheses) - make new line if more than one section involved Wrote less than a chapter Content Editor(s)/Reviewer(s) Checked your content Content Director(s) Helped guide the content direction Content Consultants (include chapter name/link in parentheses or word “General”) - make new line if more than one chapter involved Gave high level advice on content Acknowledgments Gave small assistance to content but not to the level of consulting Production Content Publisher(s) Helped with publishing platform Content Publishing Reviewer(s) Reviewed overall content and aesthetics on publishing platform Technical Course Publishing Engineer(s) Helped with the code for the technical aspects related to the specific course generation Template Publishing Engineers Candace Savonen, Carrie Wright Publishing Maintenance Engineer Candace Savonen Technical Publishing Stylists Carrie Wright, Candace Savonen Package Developers (ottrpal) John Muschelli, Candace Savonen, Carrie Wright Art and Design Illustrator(s) Created graphics for the course Figure Artist(s) Created figures/plots for course Videographer(s) Filmed videos Videography Editor(s) Edited film Audiographer(s) Recorded audio Audiography Editor(s) Edited audio recordings Funding Funder(s) Institution/individual who funded course including grant number Funding Staff Staff members who help with funding   ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os Ubuntu 20.04.3 LTS ## system x86_64, linux-gnu ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Etc/UTC ## date 2022-12-12 ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [1] RSPM (R 4.0.3) ## bookdown 0.24 2022-02-15 [1] Github (rstudio/bookdown@88bc4ea) ## callr 3.4.4 2020-09-07 [1] RSPM (R 4.0.2) ## cli 2.0.2 2020-02-28 [1] RSPM (R 4.0.0) ## crayon 1.3.4 2017-09-16 [1] RSPM (R 4.0.0) ## desc 1.2.0 2018-05-01 [1] RSPM (R 4.0.3) ## devtools 2.3.2 2020-09-18 [1] RSPM (R 4.0.3) ## digest 0.6.25 2020-02-23 [1] RSPM (R 4.0.0) ## ellipsis 0.3.1 2020-05-15 [1] RSPM (R 4.0.3) ## evaluate 0.14 2019-05-28 [1] RSPM (R 4.0.3) ## fansi 0.4.1 2020-01-08 [1] RSPM (R 4.0.0) ## fs 1.5.0 2020-07-31 [1] RSPM (R 4.0.3) ## glue 1.6.1 2022-01-22 [1] CRAN (R 4.0.2) ## hms 0.5.3 2020-01-08 [1] RSPM (R 4.0.0) ## htmltools 0.5.0 2020-06-16 [1] RSPM (R 4.0.1) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.0.2) ## knitr 1.33 2022-02-15 [1] Github (yihui/knitr@a1052d1) ## lifecycle 1.0.0 2021-02-15 [1] CRAN (R 4.0.2) ## magrittr 2.0.2 2022-01-26 [1] CRAN (R 4.0.2) ## memoise 1.1.0 2017-04-21 [1] RSPM (R 4.0.0) ## ottrpal 0.1.2 2022-02-15 [1] Github (jhudsl/ottrpal@1018848) ## pillar 1.4.6 2020-07-10 [1] RSPM (R 4.0.2) ## pkgbuild 1.1.0 2020-07-13 [1] RSPM (R 4.0.2) ## pkgconfig 2.0.3 2019-09-22 [1] RSPM (R 4.0.3) ## pkgload 1.1.0 2020-05-29 [1] RSPM (R 4.0.3) ## prettyunits 1.1.1 2020-01-24 [1] RSPM (R 4.0.3) ## processx 3.4.4 2020-09-03 [1] RSPM (R 4.0.2) ## ps 1.3.4 2020-08-11 [1] RSPM (R 4.0.2) ## purrr 0.3.4 2020-04-17 [1] RSPM (R 4.0.3) ## R6 2.4.1 2019-11-12 [1] RSPM (R 4.0.0) ## readr 1.4.0 2020-10-05 [1] RSPM (R 4.0.2) ## remotes 2.2.0 2020-07-21 [1] RSPM (R 4.0.3) ## rlang 0.4.10 2022-02-15 [1] Github (r-lib/rlang@f0c9be5) ## rmarkdown 2.10 2022-02-15 [1] Github (rstudio/rmarkdown@02d3c25) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.0.2) ## sessioninfo 1.1.1 2018-11-05 [1] RSPM (R 4.0.3) ## stringi 1.5.3 2020-09-09 [1] RSPM (R 4.0.3) ## stringr 1.4.0 2019-02-10 [1] RSPM (R 4.0.3) ## testthat 3.0.1 2022-02-15 [1] Github (R-lib/testthat@e99155a) ## tibble 3.0.3 2020-07-10 [1] RSPM (R 4.0.2) ## usethis 2.1.5.9000 2022-02-15 [1] Github (r-lib/usethis@57b109a) ## vctrs 0.3.4 2020-08-29 [1] RSPM (R 4.0.2) ## withr 2.3.0 2020-09-22 [1] RSPM (R 4.0.2) ## xfun 0.26 2022-02-15 [1] Github (yihui/xfun@74c2a66) ## yaml 2.2.1 2020-02-01 [1] RSPM (R 4.0.3) ## ## [1] /usr/local/lib/R/site-library ## [2] /usr/local/lib/R/library "],["references.html", "A References", " A References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
