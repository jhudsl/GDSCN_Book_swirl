[["index.html", "Intro R with swirl About Skills Level Format Learning Objectives Core Competencies GDSCN Collection", " Intro R with swirl March 30, 2023 About In this exercise, students are introduced to the basics of R using the swirl package (https://swirlstats.com), which teaches students R from within the R console. The primary goal of this exercise is to get students comfortable interacting with the R console. Skills Level Genetics Novice: no genetics knowledge needed Programming skills Novice: no programming experience needed Format Class Type: Lab (computer based) Lesson Length: One class period (2-3 hr lab) 40 min setup and introduction (for shorter lab periods, these can be done ahead of time) 2 hr core lab exercises Optional 20 min “challenge” exercise Learning Objectives Open RStudio and locate important panels (R console, Help) Run commands in the R console Explain what vectors and dataframes are in R Use common R commands to work with R objects (e.g. assign, print, subset, math operations) Explore a dataset using base R commands (e.g. dim, summary, str) Core Competencies This activity addresses the following core concepts and competencies: Vision and Change Competencies 2: Ability to use quantitative reasoning 4: Ability to tap into the interdisciplinary nature of science Bioinformatics C7: Use command-line bioinformatics tools and write simple computer scripts Core concepts and competencies are taken from the following sources: Vision and Change in Undergraduate Biology Education AAAS report Genetics Core Competencies by GSA Bioinformatics core competencies for undergraduate life sciences education by NIBLSE GDSCN Collection This exercise is part of a collection of teaching resources developed through the Genomic Data Science Community Network (GDSCN). GDSCN works towards a vision where researchers, educators, and students from diverse backgrounds are able to fully participate in genomic data science research. Learn more about GDSCN by visiting https://www.gdscn.org/home or reading the article in Genome Research. "],["instructor-guide.html", "Instructor Guide Teaching Recommendations Lesson Plan Computing Requirements", " Instructor Guide The primary goal of this exercise is to get students comfortable interacting with the R console. Students will complete several swirl lessons introducing basic R concepts, and then apply their new skills by conducting a brief exploration of a dataframe. Teaching Recommendations This exercise is designed to be used either As a stand-alone “taste of R”, to introduce students to the field of data science, give them an idea of what a data scientist’s day-to-day work looks like, and help students see it as something they could do. As an entry point for a more in-depth course or workshop. In this case we recommend following up on important topics using additional resources (such as R for Data Science). The swirl lessons are great for letting students work through the basics in a “real” R environment where they get immediate feedback, but they are hard for students to refer back to later. We find swirl most useful for giving students a first look at the big ideas, along with practice typing commands into the console. This sets them up well for a more in-depth treatment over the subsequent course/workshop sessions. The swirl lessons touch on several additional R commands and concepts beyond those mentioned in the learning objectives and provide a useful starting point for going deeper if you desire. Additional swirl lessons can be found at the swirl Course Network. Lesson Plan Activity Time Introduction 10 minutes Setup 25 minutes* R Programming with swirl 1 hr 40 minutes Explore us_contagious_diseases dataframe 20 minutes Optional Challenge Exercise** 20 minutes Wrap-up 5 minutes *Student Setup: Most students will not need the full time for setup, but we have built in some buffer for anyone who gets stuck. Students can proceed with the exercises on their own once they have finished setting up. Most of the setup steps can be completed ahead of time if desired. We have provided a Pre-Lab with instructions in the Appendix. **Included under Explore us_contagious_diseases dataframe Computing Requirements RStudio R packages swirl dplyr dslabs This book provides instructions on how to set these up in the cloud using the AnVIL platform, so that your students will not need to install anything. Depending on your needs, you might decide to run this activity on a different cloud provider, such Posit Cloud (formerly RStudio Cloud), or have your students install RStudio themselves. "],["introduction.html", "Chapter 1 Introduction 1.1 What is R? 1.2 Tour of RStudio", " Chapter 1 Introduction R is a popular, versatile (and free!) programming language for data analysis. This exercise will introduce you to some of the tools and ideas used for organizing data in R (such as variables, vectors, and data.frames). You will use an R tutorial package called swirl to learn some common R commands for working with data. By the end of the exercise, you will use your R programming skills to answer some questions about the us_contagious_diseases dataset. This exercise will introduce you to two important data science tools: R programming language: R is a programming language used by scientists to manipulate, visualize, and analyze data. It is one of the most popular tools for data analysis. RStudio: RStudio helps you create and manage R projects. Similar to how programs like Microsoft Word help you write documents, RStudio helps you carry out data analysis projects with R. 1.1 What is R? R is a programming language for data analysis. But what exactly does that mean, and why do people use R? 1.1.1 What is a programming language? Fundamentally, a programming language is a way for humans to give instructions to computers. Just like there are many different spoken languages throughout the world, there are many different programming languages. Similar to how each spoken language is used by a subset of the humans on this Earth, each programming language was created for a different group of people who code. You may have heard of other programming languages, such as C, Python, or HMTL previously. These are all enormously popular programming languages, but each has different strengths and weakness, and is designed to be good at different things. For example: HTML and JavaScript are designed for building websites. C and C++ are great for building software that needs to run really quickly (like video games). It’s a lot of work to write a program in C or C++, but the payoff is a very fast program. Swift and Kotlin are designed for writing mobile apps for iOS and Android respectively. Python is a high-level (i.e. easier to write), general-purpose programming language used for data analysis, web applications, general scripting, and more. R is a programming language built for data analysis - by writing R code you give the computer instructions on how to process data and produce results. 1.1.2 Why use a programming language? Why bother learning a programming language? Why not just use a tool like Excel or Tableau, where you can click buttons and drag things around (a “Graphical User Interface”, or GUI)? While it can be easier to get started with GUI-based tools, using a programming language has three major advantages: Cutting edge tools: It takes a lot more time, money, and effort to create an interactive GUI like Excel than it does to add functions in a programming language. The latest and greatest data analysis pipelines will almost always be available as part of a programming language long before they are available in a GUI-based tool. This is particularly true for highly specialized analyses. Customizability: If you’re using a GUI, you can only do something if there’s a button for it. If you use a programming language and you need a new function, you can add it yourself! Reproducibility: When you analyze data by clicking buttons, it’s hard to record or remember exactly what you did. You can write the steps down in a separate document, but there’s no guarantee you will remember everything, especially as you go back and make little tweaks. By using a programming language, you create a written record of your instructions to the computer, which shows exactly how the data was analyzed. 1.1.3 Why R? Out of all the programming languages, why choose R? R is designed specifically for statistics and data analysis. R is an open source language. This means that the language is free to use and the source code is available to the general public. R has a strong community, and people are constantly developing new packages which add new features. The tidyverse is a collection of packages that share a common philosophy of data and R programming. They are designed to work together naturally and smooth your data analysis journey through cleaning, analyzing, and presenting your data. If you are working in biology, Bioconductor provides a huge collection of packages for all kinds of biological data analysis. Python is also a great language for data analysis, with many of the same strengths as R. Either is a great choice for getting started! Many of the ideas from programming carry over from one language to another, so learning a second programming language is much easier than learning your first. 1.2 Tour of RStudio RStudio is an “Integrated Development Environment” (IDE) for R programming. This means it is specially designed to help you write and manage your R projects, sort-of like a Microsoft Word for writing R code. For example, RStudio provides something similar to a “spell check” for your R code to help you catch errors as you write. RStudio is a powerful tool with many features to help you write code and carry out data analyses more quickly, correctly, and reproducibly., This video will give you a quick introduction to some of key features of RStudio: "],["setup-on-anvil.html", "Chapter 2 Setup on AnVIL 2.1 Set up AnVIL Account 2.2 Access Materials (Clone Workspace) 2.3 Start RStudio", " Chapter 2 Setup on AnVIL In order to access R and RStudio on AnVIL, there are a few steps you need to complete. You may be able to skip some of these setup steps if you did them ahead of time. If you have already created an AnVIL account, you can start with Access Materials If you have already cloned the Workspace, you can start with Start RStudio 2.1 Set up AnVIL Account In order to run your analyses, you will use the AnVIL cloud computing platform, so that you do not need to install everything on your own computer. The AnVIL (Analysis Visualization and Informatics Lab-space) platform is specially designed for analyzing biological data, and is used by scientists doing all sorts of biological research. AnVIL in a nutshell Behind the scenes, AnVIL relies on Google Cloud Platform to provide computing infrastructure. Basically, AnVIL lets you “rent” computers from Google (remotely). Whenever you run an analyses on AnVIL, it actually runs on one of Google’s computers, and AnVIL lets you see the results in your browser. AnVIL uses Terra to provide many computational tools useful for biological data analysis, such as RStudio, Galaxy, and Jupyter Notebooks. Terra takes care of installing these tools on Google’s computers, so that you can just start using them. 2.1.1 Create Google Account First, you will need to set up a (free) Google account. If you do not already have a Google account that you would like to use for accessing AnVIL, create one now. Alternatively, if you would like to create a Google account that is associated with an existing non-Gmail email address, you can follow these instructions. 2.1.2 Log In to Terra Next, make sure you can log in to Terra – you will use Terra to perform computations on AnVIL. You can access Terra by going to anvil.terra.bio, or by clicking the link on the AnVIL home page. Open Terra, and you should be prompted to sign in with your Google account. 2.1.3 Share Username Finally, make sure your instructor has your Google account username (e.g. myname@gmail.com), so they can give you access to everything you need. Make sure there are no typos! If you have multiple Google accounts, make sure you give them the username that you will be using to access AnVIL It is very important that you share the Google account you will be using to access AnVIL with with your instructor! Otherwise, the instructor cannot add you to Billing Projects or Workspaces, and you will be unable to proceed with your assignments. 2.2 Access Materials (Clone Workspace) This will not work until your instructor has given you permission to spend money to “rent” the computers that will power your analyses (by adding you to a “Billing Project”). On AnVIL, you access files and computers through Workspaces. Each Workspace functions almost like a mini code laboratory - it is a place where data can be examined, stored, and analyzed. The first thing we want to do is to copy or “clone” a Workspace to create a space for you to experiment. This will give you access to the files you will need (data, code) the computing environment you will use Tip At this point, it might make things easier to open up a new window in your browser and split your screen. That way, you can follow along with this guide on one side and execute the steps on the other. To clone an AnVIL Workspace: Open Terra - use a web browser to go to anvil.terra.bio In the drop-down menu on the left, navigate to “Workspaces”. Click the triple bar in the top left corner to access the menu. Click “Workspaces”. You are automatically directed to the “MY WORKSPACES” tab. Here you can see any Workspaces that have been shared with you, along with your permission level. Depending on how your instructor has set things up, you may or may not see any Workspaces in this tab. Locate the Workspace specified by your instructor. (The images below show the SARS-CoV-2-Genome Workspace as an example, but you should look for the Workspace specified by your instructor.) If it has been shared with you ahead of time, it will appear in “MY WORKSPACES”. Otherwise, select the “PUBLIC” tab. In the top search bar, type the Workspace name specified by your instructor. You can also go directly to the Workspace by clicking this link: ask your instructor. Clone the workspace by clicking the teardrop button (). Select “Clone”. Or, if you have opened the Workspace, you can find the teardrop button on the top right of the Workspace. You will see a popup box appear, asking you to configure your Workspace Give your Workspace clone a name by adding an underscore (“_“) and your name. For example, \"ExampleWorkspace_Firstname_Lastname\". Select the Billing Project provided by your instructor. Leave the bottom two boxes as-is. Click “CLONE WORKSPACE”. The new Workspace should now show up under “MY WORKSPACES”. You now have your own copy of the Workspace to work in. Pause here if you are not going to be doing the lab exercises right away. Once you start up RStudio, it will cost money to keep it running. It costs a few cents an hour, so it’s quite cheap as long as you use it responsibly. But it can add up if you leave it running for days or weeks when you don’t need it. 2.3 Start RStudio AnVIL is very versatile and can scale up to use very powerful cloud computers. It’s very important that you select the cloud computing environment described here to avoid runaway costs. Open Terra - use a web browser to go to anvil.terra.bio In the drop-down menu on the left, navigate to “Workspaces”. Click the triple bar in the top left corner to access the menu. Click “Workspaces”. Click on the name of your Workspace. You should be routed to a link that looks like: https://anvil.terra.bio/#workspaces/&lt;billing-project&gt;/&lt;workspace-name&gt;. Click on the cloud icon on the far right to access your Cloud Environment options. In the dialogue box, click the “Settings” button under RStudio You will see some details about the default RStudio cloud environment, and a list of costs because it costs a small amount of money to use cloud computing. Click “CUSTOMIZE” to adjust the settings for your environment. Under “Startup script” you will see textbox. Copy the following link into the box: ask your instructor Leave everything else as-is. To create your RStudio Cloud Environment, click on the “CREATE” button. The dialogue box will close and you will be returned to your Workspace. You can see the status of your cloud environment by hovering over the RStudio logo. It will take a few minutes for Terra to request computers and install software. When your environment is ready, its status will change to “Running”. Click on the RStudio logo to open a new dialogue box that will let you launch RStudio. Click the launch icon to open RStudio. This is also where you can pause, modify, or delete your environment when needed. You should now see the RStudio interface with information about the version printed to the console. "],["r-programming-with-swirl.html", "Chapter 3 R Programming with swirl 3.1 Complete your first swirl lesson 3.2 Complete additional swirl lessons", " Chapter 3 R Programming with swirl This exercise will have you utilize an R tutorial package called swirl, which will allow you to learn R from within R. Using swirl, you will complete a series of lessons that will teach you the fundamentals of R programming. 3.1 Complete your first swirl lesson Estimated time: 20 min Open RStudio. In the R console window, type the following commands to load the swirl package: library(swirl) swirl() Install the course “R Programming: The basics of programming in R”, by following the instructions provided by swirl. Enter your name. Press ENTER. Enter 1, 2, or 3. Install the course “R Programming: The basics of programming in R”. Complete your first lesson. Select “R Programming”. Select “Basic Building Blocks”, by entering 1 ( i.e. the corresponding lesson number ). Follow the instructions provided by swirl to complete your first lesson. At the end, when swirl asks if you would like to receive Coursera credit, select “No”. 3.2 Complete additional swirl lessons Estimated time: 80 min Complete additional swirl lessons. Select “R Programming” Compete each of the following lessons: 4: Vectors 5: Missing_Values 6: Subsetting_Vectors 12: Looking_at_Data Once you have completed all the lessons listed above, exit swirl. To exit swirl, type bye() in the R console, press ESC on your keyboard, or enter 0 in response to the swirl course menu prompt. "],["explore-us_contagious_diseases-dataframe.html", "Chapter 4 Explore us_contagious_diseases dataframe 4.1 R tips 4.2 Explore dataframe 4.3 Challenge Exercise", " Chapter 4 Explore us_contagious_diseases dataframe Now we will use your R skills to explore the US Contagious Diseases dataset. This dataset is part of dslabs, a collection of datasets for practicing data analysis assembled by Rafael Irizarry and Amy Gill. You can use the help function (?us_contagious_diseases) in RStudio to find out more about this dataset. 4.1 R tips Don’t worry if you can’t remember everything - data scientists and computer programmers don’t memorize everything either. That’s why there’s a help function built in to R! As a reminder, here are a few useful commands for exploring dataframes: dim() head() tail() summary() str() If you need help remembering how to use a command, use ? ?dim If you start using R frequently, you’ll naturally start to remember some of the common commands. But don’t hesitate to look things up, or ask if you get stuck! 4.2 Explore dataframe Estimated time: 20 min To start, you will need to load the dslabs package, which contains the dataset. Type the following commands to load the package and confirm that you can view the dataset. You should see a printout of the first few rows of data, as shown below. library(dslabs) head(us_contagious_diseases) ## disease state year weeks_reporting count population ## 1 Hepatitis A Alabama 1966 50 321 3345787 ## 2 Hepatitis A Alabama 1967 49 291 3364130 ## 3 Hepatitis A Alabama 1968 52 314 3386068 ## 4 Hepatitis A Alabama 1969 49 380 3412450 ## 5 Hepatitis A Alabama 1970 51 413 3444165 ## 6 Hepatitis A Alabama 1971 51 378 3481798 It can be a bit annoying to have to type out the whole dataset name, and it’s easy to make errors. Remember that you can use “tab completion” to make the computer do the work for you! Start typing the first few letters (i.e. us), then hit the TAB key on your keyboard and you should see a list of autocomplete possibilities. Use your mouse or the arrow keys to select the one you want, or just keep typing until it’s the only one left, then hit ENTER and it will autocomplete for you. Take a minute to look at the first few rows of this dataset. Q1. How many columns are there? Q2. What’s in each column? Now use some R commands to dig a little deeper into the data. Q3. What diseases are reported in this dataset? (Hint: there are 7) Q4. What time period does this dataset cover? What’s the earliest year reported? What’s the latest year reported? Now let’s investigate something more specific: what’s the average case count for a particular disease in a particular state? The following command will extract all the rows where the disease column is equal to “Hepatitis A” and the state column is equal to “Maryland”. It stores that (much smaller) dataset in a dataframe named hepatitis_md. hepatitis_md &lt;- dplyr::filter(us_contagious_diseases, disease==&quot;Hepatitis A&quot;, state==&quot;Maryland&quot;) head(hepatitis_md) ## disease state year weeks_reporting count population ## 1 Hepatitis A Maryland 1966 52 812 3635161 ## 2 Hepatitis A Maryland 1967 52 854 3717154 ## 3 Hepatitis A Maryland 1968 52 741 3793418 ## 4 Hepatitis A Maryland 1969 49 704 3862374 ## 5 Hepatitis A Maryland 1970 51 907 3922399 ## 6 Hepatitis A Maryland 1971 51 1082 3972358 Using this new, filtered dataframe, find the average case count: Q5. What is the median case count for Hepatitis A in Maryland? Copy the above command, and run it in RStudio. Then use an R command to find the median of the count column in the hepatitis_md dataframe. Q6. Modify the above command to select for Polio cases in Vermont, and find the median case count. Remember that you can use the up arrow to cycle through previous commands. Tap the up arrow until you get back to the command that extracted the data for Hepatitis A in Maryland. Modify the command to select for Polio in Vermont. Don’t forget to store this data using a different name! It would be confusing to have the Vermont Polio data stored in an object named hepatitis_md. 4.3 Challenge Exercise Challenge: Estimated time: 20 min It’s difficult to make comparisons across states with this data as is. A case count of, say, 500 is much more concerning if it happens in a state with a small population, because it means a greater percentage of the people are getting sick. For example, the median case count for Polio in New York is 685. That’s much higher than Vermont! But let’s use the data to see whether the case counts are comparable when we adjust for the number of people in each state. This will take a few steps, and you’ll need to use multiple R commands to transform the data and extract the information you want. First, extract the New York Polio data, just like you did for the Vermont data, and store it in a new dataframe. Then, for each of these dataframes calculate the case count per 100,000 people (this is a common way to report disease frequencies) Then find the median for each state. Some tips and reminders: You can get individual columns from a dataframe using $. For example, us_contagious_diseases$count will give you a vector containing the whole counts column. If you have multiple vectors, you can do mathematical operations with them. You don’t have to do everything in one command (although you can!). You can store any intermediate results using &lt;-. Just make sure to use a name that helps you remember what you stored. So, to get the disease frequencies: Extract the count and population columns from the Vermont Polio data. Divide count by population. Multiply the result by 100000 (don’t use commas, R will be confused if you try to use 100,000). Find the median of this new vector. Repeat these steps for the New York Polio data. Finally, answer the question: C1. Is the median case count per 100000 people higher in New York or Vermont? "],["wrap-up-on-anvil.html", "Chapter 5 Wrap-up on AnVIL 5.1 Pause RStudio environment 5.2 Delete RStudio environment", " Chapter 5 Wrap-up on AnVIL Cloud computing costs are based on the amount of time you use the computing resources, so it’s important to clean up after yourself when you’re done, and not just leave the computers running. There are two ways to “shut down” RStudio on AnVIL: Pause the environment: This will save a copy of your work, and then release the computers for other people to use them. Do this if you plan to continue working in RStudio. It’s similar to turning off your computer or phone - when you start it back up, everything will be where you left it. This still costs a small amount of money, but much less than leaving the computer running. Delete the environment: This will delete everything and then release the computers for other people to use them. Do this if you are completely finished working in RStudio, or if your future work will be in a new environment. It’s similar to throwing your computer or phone in the trash! You will not be able to recover your work. Make sure you have saved anything you need before you delete your environment. 5.1 Pause RStudio environment The upper right corner reminds you that you are accruing cloud computing costs. You should minimize charges when you are not performing an analysis. You can do this by clicking on “Stop cloud environment”. This will release the CPU and memory resources for other people to use. Note that your work will be saved in the environment and continue to accrue a very small cost. This work will be lost if the cloud environment gets deleted. If there is anything you would like to save permanently, it’s a good idea to copy it from your compute environment to another location, such as the Workspace bucket, GitHub, or your local machine, depending on your needs. 5.2 Delete RStudio environment Stopping your cloud environment only pauses your work. When you are ready to delete the cloud environment, click on the gear icon in the upper right corner to “Update cloud environment”. Click on “Delete Environment Options”. If you are certain that you do not need the data and configuration on your disk, you should select “Delete everything, including persistent disk”. If there is anything you would like to save, open the compute environment and copy the file(s) from your compute environment to another location, such as the Workspace bucket, GitHub, or your local machine, depending on your needs. Select “DELETE”. "],["pre-lab.html", "A Pre-lab A.1 Set up AnVIL Account A.2 Access Materials (Clone Workspace)", " A Pre-lab Welcome! This lab will introduce you to some basic data analysis using the R programming language. In order to do this, there are a few steps you need to complete so that you can access the material and be ready to start computing with R. A.1 Set up AnVIL Account In order to run your analyses, you will use the AnVIL cloud computing platform, so that you do not need to install everything on your own computer. The AnVIL (Analysis Visualization and Informatics Lab-space) platform is specially designed for analyzing biological data, and is used by scientists doing all sorts of biological research. AnVIL in a nutshell Behind the scenes, AnVIL relies on Google Cloud Platform to provide computing infrastructure. Basically, AnVIL lets you “rent” computers from Google (remotely). Whenever you run an analyses on AnVIL, it actually runs on one of Google’s computers, and AnVIL lets you see the results in your browser. AnVIL uses Terra to provide many computational tools useful for biological data analysis, such as RStudio, Galaxy, and Jupyter Notebooks. Terra takes care of installing these tools on Google’s computers, so that you can just start using them. A.1.1 Create Google Account First, you will need to set up a (free) Google account. If you do not already have a Google account that you would like to use for accessing AnVIL, create one now. Alternatively, if you would like to create a Google account that is associated with an existing non-Gmail email address, you can follow these instructions. A.1.2 Log In to Terra Next, make sure you can log in to Terra – you will use Terra to perform computations on AnVIL. You can access Terra by going to anvil.terra.bio, or by clicking the link on the AnVIL home page. Open Terra, and you should be prompted to sign in with your Google account. A.1.3 Share Username Finally, make sure your instructor has your Google account username (e.g. myname@gmail.com), so they can give you access to everything you need. Make sure there are no typos! If you have multiple Google accounts, make sure you give them the username that you will be using to access AnVIL It is very important that you share the Google account you will be using to access AnVIL with with your instructor! Otherwise, the instructor cannot add you to Billing Projects or Workspaces, and you will be unable to proceed with your assignments. A.2 Access Materials (Clone Workspace) This will not work until your instructor has given you permission to spend money to “rent” the computers that will power your analyses (by adding you to a “Billing Project”). On AnVIL, you access files and computers through Workspaces. Each Workspace functions almost like a mini code laboratory - it is a place where data can be examined, stored, and analyzed. The first thing we want to do is to copy or “clone” a Workspace to create a space for you to experiment. This will give you access to the files you will need (data, code) the computing environment you will use Tip At this point, it might make things easier to open up a new window in your browser and split your screen. That way, you can follow along with this guide on one side and execute the steps on the other. To clone an AnVIL Workspace: Open Terra - use a web browser to go to anvil.terra.bio In the drop-down menu on the left, navigate to “Workspaces”. Click the triple bar in the top left corner to access the menu. Click “Workspaces”. You are automatically directed to the “MY WORKSPACES” tab. Here you can see any Workspaces that have been shared with you, along with your permission level. Depending on how your instructor has set things up, you may or may not see any Workspaces in this tab. Locate the Workspace specified by your instructor. (The images below show the SARS-CoV-2-Genome Workspace as an example, but you should look for the Workspace specified by your instructor.) If it has been shared with you ahead of time, it will appear in “MY WORKSPACES”. Otherwise, select the “PUBLIC” tab. In the top search bar, type the Workspace name specified by your instructor. You can also go directly to the Workspace by clicking this link: ask your instructor. Clone the workspace by clicking the teardrop button (). Select “Clone”. Or, if you have opened the Workspace, you can find the teardrop button on the top right of the Workspace. You will see a popup box appear, asking you to configure your Workspace Give your Workspace clone a name by adding an underscore (“_“) and your name. For example, \"ExampleWorkspace_Firstname_Lastname\". Select the Billing Project provided by your instructor. Leave the bottom two boxes as-is. Click “CLONE WORKSPACE”. The new Workspace should now show up under “MY WORKSPACES”. You now have your own copy of the Workspace to work in. Pause here if you are not going to be doing the lab exercises right away. Once you start up RStudio, it will cost money to keep it running. It costs a few cents an hour, so it’s quite cheap as long as you use it responsibly. But it can add up if you leave it running for days or weeks when you don’t need it. "],["about-the-authors.html", "About the Authors", " About the Authors These credits are based on our course contributors table guidelines.     Credits Names Pedagogy Lead Content Instructor(s) FirstName LastName Lecturer(s) (include chapter name/link in parentheses if only for specific chapters) - make new line if more than one chapter involved Delivered the course in some way - video or audio Content Author(s) (include chapter name/link in parentheses if only for specific chapters) - make new line if more than one chapter involved If any other authors besides lead instructor Content Contributor(s) (include section name/link in parentheses) - make new line if more than one section involved Wrote less than a chapter Content Editor(s)/Reviewer(s) Checked your content Content Director(s) Helped guide the content direction Content Consultants (include chapter name/link in parentheses or word “General”) - make new line if more than one chapter involved Gave high level advice on content Acknowledgments Gave small assistance to content but not to the level of consulting Production Content Publisher(s) Helped with publishing platform Content Publishing Reviewer(s) Reviewed overall content and aesthetics on publishing platform Technical Course Publishing Engineer(s) Helped with the code for the technical aspects related to the specific course generation Template Publishing Engineers Candace Savonen, Carrie Wright Publishing Maintenance Engineer Candace Savonen Technical Publishing Stylists Carrie Wright, Candace Savonen Package Developers (ottrpal) John Muschelli, Candace Savonen, Carrie Wright Art and Design Illustrator(s) Created graphics for the course Figure Artist(s) Created figures/plots for course Videographer(s) Filmed videos Videography Editor(s) Edited film Audiographer(s) Recorded audio Audiography Editor(s) Edited audio recordings Funding Funder(s) Institution/individual who funded course including grant number Funding Staff Staff members who help with funding   ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os Ubuntu 20.04.5 LTS ## system x86_64, linux-gnu ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Etc/UTC ## date 2023-03-30 ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [1] RSPM (R 4.0.5) ## bookdown 0.24 2023-03-28 [1] Github (rstudio/bookdown@88bc4ea) ## bslib 0.4.2 2022-12-16 [1] CRAN (R 4.0.2) ## cachem 1.0.7 2023-02-24 [1] CRAN (R 4.0.2) ## callr 3.5.0 2020-10-08 [1] RSPM (R 4.0.2) ## cli 3.6.1 2023-03-23 [1] CRAN (R 4.0.2) ## crayon 1.3.4 2017-09-16 [1] RSPM (R 4.0.0) ## desc 1.2.0 2018-05-01 [1] RSPM (R 4.0.3) ## devtools 2.3.2 2020-09-18 [1] RSPM (R 4.0.3) ## digest 0.6.25 2020-02-23 [1] RSPM (R 4.0.0) ## ellipsis 0.3.1 2020-05-15 [1] RSPM (R 4.0.3) ## evaluate 0.20 2023-01-17 [1] CRAN (R 4.0.2) ## fastmap 1.1.1 2023-02-24 [1] CRAN (R 4.0.2) ## fs 1.5.0 2020-07-31 [1] RSPM (R 4.0.3) ## glue 1.4.2 2020-08-27 [1] RSPM (R 4.0.5) ## htmltools 0.5.5 2023-03-23 [1] CRAN (R 4.0.2) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.0.2) ## jsonlite 1.7.1 2020-09-07 [1] RSPM (R 4.0.2) ## knitr 1.33 2023-03-28 [1] Github (yihui/knitr@a1052d1) ## magrittr 2.0.3 2022-03-30 [1] CRAN (R 4.0.2) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.0.2) ## pkgbuild 1.1.0 2020-07-13 [1] RSPM (R 4.0.2) ## pkgload 1.1.0 2020-05-29 [1] RSPM (R 4.0.3) ## prettyunits 1.1.1 2020-01-24 [1] RSPM (R 4.0.3) ## processx 3.4.4 2020-09-03 [1] RSPM (R 4.0.2) ## ps 1.4.0 2020-10-07 [1] RSPM (R 4.0.2) ## R6 2.4.1 2019-11-12 [1] RSPM (R 4.0.0) ## remotes 2.2.0 2020-07-21 [1] RSPM (R 4.0.3) ## rlang 1.1.0 2023-03-14 [1] CRAN (R 4.0.2) ## rmarkdown 2.10 2023-03-28 [1] Github (rstudio/rmarkdown@02d3c25) ## rprojroot 2.0.3 2022-04-02 [1] CRAN (R 4.0.2) ## sass 0.4.5 2023-01-24 [1] CRAN (R 4.0.2) ## sessioninfo 1.1.1 2018-11-05 [1] RSPM (R 4.0.3) ## stringi 1.5.3 2020-09-09 [1] RSPM (R 4.0.3) ## stringr 1.4.0 2019-02-10 [1] RSPM (R 4.0.3) ## testthat 3.0.1 2023-03-28 [1] Github (R-lib/testthat@e99155a) ## usethis 1.6.3 2020-09-17 [1] RSPM (R 4.0.2) ## withr 2.3.0 2020-09-22 [1] RSPM (R 4.0.2) ## xfun 0.26 2023-03-28 [1] Github (yihui/xfun@74c2a66) ## yaml 2.2.1 2020-02-01 [1] RSPM (R 4.0.3) ## ## [1] /usr/local/lib/R/site-library ## [2] /usr/local/lib/R/library "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
